singularity {

    autoMounts=true
    enabled=true

}

params.application = "$application"
params.version = "$version"
params.out="$baseDir"

// Ensure that cluster_time is a closure
if (!(cluster_time instanceof Closure)){
    println("Changing to closure")
    params.cluster_time = { cluster_time }
}else{
    params.cluster_time = cluster_time
}

retry_val=3
license="/freesurfer/6.0.0/build/"

profiles {

    //DEFAULT
    standard {

        params.cluster_queue = { "high-moby" }
        process.executor = "SLURM"
        process.queue = "high-moby"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
    }

    kimel {

        params.cluster_queue = { "high-moby" }
        process.executor = "SLURM"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
    }

    scc {

        // Dynamic queue allocation
        params.cluster_queue = { wtime ->
            pmap = ["12:00:00": "short",
                    "1:00:00:00": "medium",
                    "2:00:00:00": "long",
                    "166:00:00:00": "verylong"]

            time_is_greater = { w, c ->
                    int wt = w.replace(":","").toInteger()
                    int cp = c.replace(":","").toInteger()
                    return (wt > cp)
            }

            partition = pmap.grep{time_is_greater(wtime, it.key)}
            return partition[0].value
        }

        process.executor = "SLURM"
        process.queue = "long"
        params.simg = "/KIMEL/tigrlab/$simg"
        params.invocation= "/KIMEL/tigrlab/$invocation"
        params.descriptor = "/KIMEL/tigrlab/$descriptor"
        params.license = "/KIMEL/quarantine/$license"

    }

    local {
        process.executor = "local"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"

    }


}

includeConfig './report_invocation.nf.config'

process {

    withName: modify_invocation{
        executor = 'local'
    }

    withName: save_invocation {
        executor="local"
    }

    withName: run_bids {
        maxRetries = retry_val
        errorStrategy = {task.attempt == retry_val ? "finish" : "retry"}
        clusterOptions = "--mem-per-cpu=$cluster_mem_cpu\
         --cpus-per-task=$cluster_cpus --job-name ${application}_${version}\
         --nodes=1"
    }
}
